import { InventoryPagesEnum, ScanProductTypesEnum } from '../models';
export declare const useInventory: () => {
    inventory: import("../models").InventoryInterface | undefined;
    product: import("../models").ProductInterface | undefined;
    page: InventoryPagesEnum;
    inventoryType: import("../models").InventoryTypeEnum;
    setInventoryType: (data: import("../models").InventoryTypeEnum) => void;
    setDataProduct: (product: import("../models").ProductInterface) => void;
    history: import("history").History<unknown> | undefined;
    setHistory: (data: import("history").History<unknown>) => void;
    userStore: import("../models").StoreInterface | undefined;
    setUserStore: (data: import("../models").StoreInterface) => void;
    quantity: string;
    setQuantity: (value: string) => void;
    actionClearInventory: () => void;
    actionClearProduct: () => void;
    actionScanZone: (contentScan: string) => Promise<void>;
    actionScanProduct: (contentScan: string, ScanProductTypes?: ScanProductTypesEnum) => Promise<void>;
    actionContinueToReadProduct: () => Promise<void>;
    actionSaveProduct: () => Promise<void>;
    actionFinishInventory: () => Promise<void>;
    actionListZonificationSaved: (filters: any) => Promise<any>;
    actionListFiltersZonification: () => Promise<any>;
    actionListProductsByZonification: (id: string) => Promise<any>;
    actionEditProductCount: (amount: string) => Promise<void>;
    getTotalFurniture: () => Promise<import("../models").ApiResponse>;
    actionSendListInventory: (inventories: any[]) => Promise<any>;
    routeToInventoryMenu: () => Promise<void>;
    routeToLoadZone: () => void;
    routeToScanZone: () => void;
    routeToScanProduct: () => void;
    routeToReadProduct: () => void;
    routeToSuccess: () => void;
    routeToSavedInventory: () => Promise<void>;
    routeToInventorySavedEdit: () => void;
    routeToInventorySavedFilters: () => void;
    routeToInventorySavedLoadSuccess: () => void;
    routeToInventorySavedList: () => void;
    zoneSelected: any;
    setZoneSelected: (data: any) => void;
    userSelected: any;
    setUserSelected: (data: any) => void;
    furnituresSelected: any;
    setFurnituresSelected: (data: any) => void;
    inventoriesSelectedSaved: any;
    setInventoriesSelectedSaved: (data: any) => void;
    productIdSelected: string | undefined;
    setProductIdSelected: (id: string) => void;
};
