import { ChecklistFlowPagesEnum } from '../dtos';
export declare const useChecklist: () => {
    country: string;
    page: ChecklistFlowPagesEnum;
    loading: boolean;
    error: import("../dtos/error-types.enum").ERROR_TYPES | undefined;
    setLoading: (value: boolean) => void;
    checklist: import("../dtos").IChecklistTask[];
    selectedCheck: import("../dtos").IChecklistTaskExtended | undefined;
    selectedClItem: import("../dtos").IChecklistItem | undefined;
    feedback: import("../dtos").ItemFeedback | undefined;
    routeToHome: () => void;
    routeToChecklistTool: () => void;
    routeToChecklistItemsTool: () => void;
    routeToChecklistItemFeedbackTool: () => void;
    routeToChecklistItemsTask: () => void;
    redirectToChecklistItemsTask: (id: string) => void;
    routeToChecklistItemFeedbackTask: () => void;
    getChecklistItemData: (id: string) => Promise<void>;
    routeToChecklistSummary: () => void;
    getChecklists: () => Promise<void>;
    showSuccessSnackBar: (msg: string, type?: "error" | "success" | undefined) => void;
    setFeedback: (feedback: import("../dtos").ItemFeedback | undefined) => void;
    setSelectedCheck: (selectedCheck: import("../dtos").IChecklistTaskExtended | undefined) => void;
    getChecklistData: (id: string) => Promise<import("../dtos").IChecklistTaskExtended>;
    setSelectedClItem: (data: import("../dtos").IChecklistItem | undefined) => void;
    saveFeedback: (feedback: import("../dtos").ItemFeedback, taskId: string, itemId: string) => Promise<void>;
    sendChecklist: (taskId: string) => void;
    selectedChecklistTask: import("../dtos").IChecklistTaskItem[] | undefined;
    setSelectedChecklistTask: (data: import("../dtos").IChecklistTaskItem[]) => void;
    completeChecklistTask: (feedback: import("../dtos").ItemFeedback, taskId: string, itemId: string) => Promise<void>;
    setChecklistTaskId: (id: string | undefined) => void;
    checklistTaskId: string | undefined;
};
